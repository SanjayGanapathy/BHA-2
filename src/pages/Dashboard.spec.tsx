import { render, screen, waitFor, within } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { BrowserRouter } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import Dashboard from './Dashboard';
import * as api from '@/lib/api';
import { DEMO_PRODUCTS, DEMO_SALES } from '@/lib/demo-data';
import { AuthProvider } from '@/auth/AuthProvider';

// Mock the entire api module
vi.mock('@/lib/api');

const createTestQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
    },
  },
});

describe('Dashboard Page', () => {
  let queryClient: QueryClient;

  // The helper function is now defined inside `describe`
  // so it has access to the `queryClient` from `beforeEach`.
  const renderDashboard = () => {
    render(
      <QueryClientProvider client={queryClient}>
        <BrowserRouter>
          <AuthProvider>
            <Dashboard />
          </AuthProvider>
        </BrowserRouter>
      </QueryClientProvider>
    );
  };

  beforeEach(() => {
    queryClient = createTestQueryClient();
    vi.resetAllMocks();
  });

  it('should display the loading screen while queries are in progress', () => {
    vi.mocked(api.fetchSales).mockReturnValue(new Promise(() => {}));
    vi.mocked(api.fetchProducts).mockReturnValue(new Promise(() => {}));
    renderDashboard();
    expect(screen.getByText(/Initializing.../i)).toBeInTheDocument();
  });

  it('should display an error message if fetching sales fails', async () => {
    vi.mocked(api.fetchSales).mockRejectedValue(new Error('Network Error'));
    vi.mocked(api.fetchProducts).mockResolvedValue(DEMO_PRODUCTS);
    renderDashboard();
    
    await waitFor(() => {
      expect(screen.getByText(/Error Loading Dashboard/i)).toBeInTheDocument();
      expect(screen.getByText(/Network Error/i)).toBeInTheDocument();
    });
  });

  it('should render the dashboard cards with correct data on successful fetch', async () => {
    vi.mocked(api.fetchSales).mockResolvedValue(DEMO_SALES);
    vi.mocked(api.fetchProducts).mockResolvedValue(DEMO_PRODUCTS);
    renderDashboard();

    const heading = await screen.findByRole('heading', { name: /Dashboard/i });
    expect(heading).toBeInTheDocument();
    
    // This now looks for the clean, sanitized test ID generated by MetricsCard.tsx
    const revenueCard = await screen.findByTestId("metrics-card-todays-revenue");
    
    const revenueValue = within(revenueCard).getByText('$4.50');
    expect(revenueValue).toBeInTheDocument();
  });
});